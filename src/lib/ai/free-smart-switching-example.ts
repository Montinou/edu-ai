import { generateWithFreeSwitching, generateImageWithFreeSwitching } from './free-smart-switching';

// Example usage of free smart switching system

// Function to demonstrate text generation with switching
async function exampleTextGeneration() {
  try {
    console.log("Generating math problem with reasoning...");
    const mathProblem = await generateWithFreeSwitching(
      "Create a math problem about fractions for a 5th grade student.",
      { 
        type: 'reasoning',
        maxTokens: 300
      }
    );
    
    console.log(`Result from ${mathProblem.provider} (${mathProblem.model}):`);
    console.log(`Response: ${mathProblem.text}`);
    console.log(`Latency: ${mathProblem.latency}ms`);
    console.log(`Tokens: ~${mathProblem.estimatedTokens}`);
    console.log("---");
    
    console.log("Generating creative story...");
    const story = await generateWithFreeSwitching(
      "Write a short story about a robot learning to paint.",
      { 
        type: 'creative',
        maxTokens: 500,
        temperature: 0.8
      }
    );
    
    console.log(`Result from ${story.provider} (${story.model}):`);
    console.log(`Response: ${story.text}`);
    console.log(`Latency: ${story.latency}ms`);
    console.log(`Tokens: ~${story.estimatedTokens}`);
    console.log("---");
    
    console.log("Generating code example...");
    const code = await generateWithFreeSwitching(
      "Write a React component that displays a counter with increment and decrement buttons.",
      { 
        type: 'code',
        maxTokens: 500
      }
    );
    
    console.log(`Result from ${code.provider} (${code.model}):`);
    console.log(`Response: ${code.text}`);
    console.log(`Latency: ${code.latency}ms`);
    console.log(`Tokens: ~${code.estimatedTokens}`);
    
  } catch (error) {
    console.error("Error in text generation:", error);
  }
}

// Function to demonstrate image generation
async function exampleImageGeneration() {
  try {
    console.log("Generating educational image...");
    const image = await generateImageWithFreeSwitching(
      "A colorful diagram showing the water cycle for elementary students"
    );
    
    console.log(`Image generated by ${image.provider}:`);
    console.log(`URL: ${image.url}`);
    console.log(`Latency: ${image.latency}ms`);
    
  } catch (error) {
    console.error("Error in image generation:", error);
  }
}

// Function to demonstrate high-volume usage with automatic switching
async function batchGeneration(count: number) {
  console.log(`Starting batch generation of ${count} items...`);
  
  const results = {
    providers: {} as Record<string, number>,
    successful: 0,
    failed: 0,
    averageLatency: 0
  };
  
  const startTime = Date.now();
  
  for (let i = 0; i < count; i++) {
    try {
      const prompt = `Generate a one-sentence fact about ${['space', 'oceans', 'animals', 'history', 'science'][i % 5]}`;
      const result = await generateWithFreeSwitching(prompt, { maxTokens: 100 });
      
      // Track provider usage
      results.providers[result.provider] = (results.providers[result.provider] || 0) + 1;
      results.successful++;
      results.averageLatency += result.latency;
      
      if (i % 10 === 0) {
        console.log(`Completed ${i}/${count} generations...`);
      }
    } catch (error) {
      results.failed++;
      console.error(`Error on item ${i}:`, error);
    }
  }
  
  const totalTime = Date.now() - startTime;
  results.averageLatency = results.averageLatency / results.successful;
  
  console.log("Batch generation results:");
  console.log(`Total time: ${totalTime}ms`);
  console.log(`Successful: ${results.successful}/${count}`);
  console.log(`Failed: ${results.failed}/${count}`);
  console.log(`Average latency: ${results.averageLatency.toFixed(2)}ms`);
  console.log("Provider distribution:");
  
  Object.entries(results.providers).forEach(([provider, count]) => {
    console.log(`- ${provider}: ${count} (${((count / results.successful) * 100).toFixed(1)}%)`);
  });
}

// Run examples
async function runExamples() {
  console.log("=== FREE AI SMART SWITCHING EXAMPLES ===");
  
  await exampleTextGeneration();
  console.log("\n");
  
  await exampleImageGeneration();
  console.log("\n");
  
  // Uncomment to run batch test
  // await batchGeneration(50);
}

// Execute if running directly
if (require.main === module) {
  runExamples().catch(console.error);
}

export { exampleTextGeneration, exampleImageGeneration, batchGeneration };
